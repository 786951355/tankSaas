package com.tanker.basemodule.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.tanker.basemodule.model.User;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USER".
 */
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, String.class, "uId", true, "U_ID");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property HeadImg = new Property(2, String.class, "headImg", false, "HEAD_IMG");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }

    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"U_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uId
                "\"PHONE\" TEXT," + // 1: phone
                "\"HEAD_IMG\" TEXT);"); // 2: headImg
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUId());

        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }

        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(3, headImg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUId());

        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }

        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(3, headImg);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
                cursor.getString(offset + 0), // uId
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // headImg
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUId(cursor.getString(offset + 0));
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeadImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getUId();
    }

    @Override
    public String getKey(User entity) {
        if (entity != null) {
            return entity.getUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
